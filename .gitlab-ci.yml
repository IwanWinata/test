stages:
  - build
  - deploy

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  NODE_ENV: 'production'

cache:
  paths:
    - node_modules/

build:
  stage: build
  script:
    - docker build -t $IMAGE_TAG .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_TAG
  only:
    - production

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST bash -c "
        if [ ! -d \"/data/MONITORING/gitlab-apps/lp_kontraktor\" ]; then
          git clone -b production https://deployer:glpat-xUkxcPoSguc6MazpD2xv@gitlab.happyhomes.id/amani-repos/lp_kontraktor.git /data/MONITORING/gitlab-apps/lp_kontraktor
        else
          cd /data/MONITORING/gitlab-apps/lp_kontraktor && git pull
        fi
        cd /data/MONITORING/gitlab-apps/lp_kontraktor
        docker compose -f docker-compose.yml down
        docker images -q registry.happyhomes.id/amani-repos/lp_kontraktor:production | xargs -r docker rmi -f
        docker image prune -f
        docker login registry.happyhomes.id -u deployer -p h@pPyH0m3s15243!
        docker compose -f docker-compose.yml up -d
      "
  only:
    - production